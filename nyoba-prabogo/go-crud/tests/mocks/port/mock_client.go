// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_outbound_port is a generated GoMock package.
package mock_outbound_port

import (
	model "prabogo/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientDatabasePort is a mock of ClientDatabasePort interface.
type MockClientDatabasePort struct {
	ctrl     *gomock.Controller
	recorder *MockClientDatabasePortMockRecorder
}

// MockClientDatabasePortMockRecorder is the mock recorder for MockClientDatabasePort.
type MockClientDatabasePortMockRecorder struct {
	mock *MockClientDatabasePort
}

// NewMockClientDatabasePort creates a new mock instance.
func NewMockClientDatabasePort(ctrl *gomock.Controller) *MockClientDatabasePort {
	mock := &MockClientDatabasePort{ctrl: ctrl}
	mock.recorder = &MockClientDatabasePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientDatabasePort) EXPECT() *MockClientDatabasePortMockRecorder {
	return m.recorder
}

// DeleteByFilter mocks base method.
func (m *MockClientDatabasePort) DeleteByFilter(filter model.ClientFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByFilter indicates an expected call of DeleteByFilter.
func (mr *MockClientDatabasePortMockRecorder) DeleteByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByFilter", reflect.TypeOf((*MockClientDatabasePort)(nil).DeleteByFilter), filter)
}

// FindByFilter mocks base method.
func (m *MockClientDatabasePort) FindByFilter(filter model.ClientFilter, lock bool) ([]model.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", filter, lock)
	ret0, _ := ret[0].([]model.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *MockClientDatabasePortMockRecorder) FindByFilter(filter, lock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockClientDatabasePort)(nil).FindByFilter), filter, lock)
}

// IsExists mocks base method.
func (m *MockClientDatabasePort) IsExists(bearerKey string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", bearerKey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockClientDatabasePortMockRecorder) IsExists(bearerKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockClientDatabasePort)(nil).IsExists), bearerKey)
}

// Upsert mocks base method.
func (m *MockClientDatabasePort) Upsert(datas []model.ClientInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", datas)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockClientDatabasePortMockRecorder) Upsert(datas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockClientDatabasePort)(nil).Upsert), datas)
}

// MockClientMessagePort is a mock of ClientMessagePort interface.
type MockClientMessagePort struct {
	ctrl     *gomock.Controller
	recorder *MockClientMessagePortMockRecorder
}

// MockClientMessagePortMockRecorder is the mock recorder for MockClientMessagePort.
type MockClientMessagePortMockRecorder struct {
	mock *MockClientMessagePort
}

// NewMockClientMessagePort creates a new mock instance.
func NewMockClientMessagePort(ctrl *gomock.Controller) *MockClientMessagePort {
	mock := &MockClientMessagePort{ctrl: ctrl}
	mock.recorder = &MockClientMessagePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientMessagePort) EXPECT() *MockClientMessagePortMockRecorder {
	return m.recorder
}

// PublishUpsert mocks base method.
func (m *MockClientMessagePort) PublishUpsert(datas []model.ClientInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishUpsert", datas)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishUpsert indicates an expected call of PublishUpsert.
func (mr *MockClientMessagePortMockRecorder) PublishUpsert(datas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishUpsert", reflect.TypeOf((*MockClientMessagePort)(nil).PublishUpsert), datas)
}

// MockClientCachePort is a mock of ClientCachePort interface.
type MockClientCachePort struct {
	ctrl     *gomock.Controller
	recorder *MockClientCachePortMockRecorder
}

// MockClientCachePortMockRecorder is the mock recorder for MockClientCachePort.
type MockClientCachePortMockRecorder struct {
	mock *MockClientCachePort
}

// NewMockClientCachePort creates a new mock instance.
func NewMockClientCachePort(ctrl *gomock.Controller) *MockClientCachePort {
	mock := &MockClientCachePort{ctrl: ctrl}
	mock.recorder = &MockClientCachePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCachePort) EXPECT() *MockClientCachePortMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClientCachePort) Get(bearerKey string) (model.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", bearerKey)
	ret0, _ := ret[0].(model.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientCachePortMockRecorder) Get(bearerKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientCachePort)(nil).Get), bearerKey)
}

// Set mocks base method.
func (m *MockClientCachePort) Set(data model.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientCachePortMockRecorder) Set(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientCachePort)(nil).Set), data)
}
