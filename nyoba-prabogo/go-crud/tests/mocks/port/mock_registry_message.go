// Code generated by MockGen. DO NOT EDIT.
// Source: registry_message.go

// Package mock_outbound_port is a generated GoMock package.
package mock_outbound_port

import (
	outbound_port "prabogo/internal/port/outbound"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessagePort is a mock of MessagePort interface.
type MockMessagePort struct {
	ctrl     *gomock.Controller
	recorder *MockMessagePortMockRecorder
}

// MockMessagePortMockRecorder is the mock recorder for MockMessagePort.
type MockMessagePortMockRecorder struct {
	mock *MockMessagePort
}

// NewMockMessagePort creates a new mock instance.
func NewMockMessagePort(ctrl *gomock.Controller) *MockMessagePort {
	mock := &MockMessagePort{ctrl: ctrl}
	mock.recorder = &MockMessagePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagePort) EXPECT() *MockMessagePortMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockMessagePort) Client() outbound_port.ClientMessagePort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(outbound_port.ClientMessagePort)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockMessagePortMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockMessagePort)(nil).Client))
}
